#pragma once

#include "Start Routine.h"
#include "Manual Mapping.h"

ALIGN struct INJECTION_FUNCTION_TABLE
{
	ALIGN WIN32_FUNC_LOCAL(LoadLibraryExW);
	ALIGN NT_FUNC_LOCAL(LdrLoadDll);
	ALIGN NT_FUNC_LOCAL(LdrpLoadDll);
	ALIGN NT_FUNC_LOCAL(LdrpLoadDllInternal);

	ALIGN NT_FUNC_LOCAL(LdrpPreprocessDllName);

	ALIGN WIN32_FUNC_LOCAL(GetLastError);

	ALIGN NT_FUNC_LOCAL(memmove);
	ALIGN NT_FUNC_LOCAL(RtlZeroMemory);

	ALIGN NT_FUNC_LOCAL(RtlRbRemoveNode);

	ALIGN NT_FUNC_LOCAL(NtProtectVirtualMemory);
	
	ALIGN NT_FUNC_LOCAL(RtlAddVectoredExceptionHandler);
	ALIGN NT_FUNC_LOCAL(LdrProtectMrdata);
	ALIGN NT_FUNC_LOCAL(LdrpInvertedFunctionTable);

	ALIGN NT_FUNC_LOCAL(LdrpModuleBaseAddressIndex);
	ALIGN NT_FUNC_LOCAL(LdrpMappingInfoIndex);
	ALIGN NT_FUNC_LOCAL(LdrpDefaultPath);

	INJECTION_FUNCTION_TABLE();
};

struct INJECTION_DATA_INTERNAL
{
	ALIGN HINSTANCE	hRet		= NULL;
	ALIGN DWORD		LastError	= 0;

	ALIGN DWORD				Flags	= NULL;
	ALIGN INJECTION_MODE	Mode	= INJECTION_MODE::IM_LoadLibraryExW;

	ALIGN UNICODE_STRING	ModuleFileName{ 0 };
	ALIGN wchar_t			Path[MAX_PATH]{ 0 };

	ALIGN LDRP_UNICODE_STRING_BUNDLE	ModuleFileNameBundle{ 0 };
	ALIGN LDRP_PATH_SEARCH_CONTEXT		SearchPathContext{ 0 };
	
	ALIGN DWORD OSVersion		= 0;
	ALIGN DWORD OSBuildNumber	= 0;

	ALIGN BYTE * pVEHShell		= nullptr;
	ALIGN DWORD VEHShellSize	= 0;

	ALIGN INJECTION_FUNCTION_TABLE f;
};

DWORD InjectDLL(const wchar_t * szDllFile, HANDLE hTargetProc, INJECTION_MODE Mode, LAUNCH_METHOD Method, DWORD Flags, HINSTANCE & hOut, DWORD Timeout, ERROR_DATA & error_data);

#ifdef _WIN64

ALIGN_86 struct INJECTION_FUNCTION_TABLE_WOW64
{
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LoadLibraryExW);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrLoadDll);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrpLoadDll);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrpLoadDllInternal);

	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrpPreprocessDllName);

	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(GetLastError);

	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(memmove);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(RtlZeroMemory);

	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(RtlRbRemoveNode);

	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(NtProtectVirtualMemory);

	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(RtlAddVectoredExceptionHandler);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrProtectMrdata);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrpInvertedFunctionTable);

	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrpModuleBaseAddressIndex);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrpMappingInfoIndex);
	ALIGN_86 WOW64_FUNCTION_POINTER_LOCAL(LdrpDefaultPath);

	INJECTION_FUNCTION_TABLE_WOW64();
};

ALIGN_86 struct INJECTION_DATA_INTERNAL_WOW64
{
	ALIGN_86 DWORD hRet			= 0;
	ALIGN_86 DWORD LastError	= 0;

	ALIGN_86 DWORD			Flags	= NULL;
	ALIGN_86 INJECTION_MODE	Mode	= INJECTION_MODE::IM_LoadLibraryExW;

	ALIGN_86 UNICODE_STRING_32	ModuleFileName{ 0 };
	ALIGN_86 wchar_t			Path[MAX_PATH]{ 0 };

	ALIGN_86 LDRP_UNICODE_STRING_BUNDLE_32	ModuleFileNameBundle{ 0 };
	ALIGN_86 LDRP_PATH_SEARCH_CONTEXT_32	SearchPathContext{ 0 };

	ALIGN_86 DWORD OSVersion		= 0;
	ALIGN_86 DWORD OSBuildNumber	= 0;

	ALIGN_86 DWORD pVEHShell	= 0;
	ALIGN_86 DWORD VEHShellSize = 0;

	ALIGN_86 INJECTION_FUNCTION_TABLE_WOW64 f;
};

DWORD InjectDLL_WOW64(const wchar_t * szDllFile, HANDLE hTargetProc, INJECTION_MODE Mode, LAUNCH_METHOD Method, DWORD Flags, HINSTANCE & hOut, DWORD Timeout, ERROR_DATA & error_data);

#endif