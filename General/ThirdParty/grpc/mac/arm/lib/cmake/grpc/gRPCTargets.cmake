# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.23)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS gRPC::cares gRPC::re2 gRPC::zlibstatic gRPC::address_sorting gRPC::gpr gRPC::grpc gRPC::grpc_unsecure gRPC::grpc++ gRPC::grpc++_alts gRPC::grpc++_error_details gRPC::grpc++_reflection gRPC::grpc++_unsecure gRPC::grpc_plugin_support gRPC::grpcpp_channelz gRPC::upb gRPC::grpc_cpp_plugin gRPC::grpc_csharp_plugin gRPC::grpc_node_plugin gRPC::grpc_objective_c_plugin gRPC::grpc_php_plugin gRPC::grpc_python_plugin gRPC::grpc_ruby_plugin)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target gRPC::cares
add_library(gRPC::cares STATIC IMPORTED)

set_target_properties(gRPC::cares PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "CARES_STATICLIB"
  INTERFACE_LINK_LIBRARIES "resolv"
)

# Create imported target gRPC::re2
add_library(gRPC::re2 STATIC IMPORTED)

set_target_properties(gRPC::re2 PROPERTIES
  INTERFACE_LINK_LIBRARIES "Threads::Threads"
)

# Create imported target gRPC::zlibstatic
add_library(gRPC::zlibstatic STATIC IMPORTED)

# Create imported target gRPC::address_sorting
add_library(gRPC::address_sorting STATIC IMPORTED)

set_target_properties(gRPC::address_sorting PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "m;pthread"
)

# Create imported target gRPC::gpr
add_library(gRPC::gpr STATIC IMPORTED)

set_target_properties(gRPC::gpr PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "m;pthread;absl::base;absl::core_headers;absl::memory;absl::status;absl::cord;absl::str_format;absl::strings;absl::synchronization;absl::time;absl::optional;gRPC::upb"
)

# Create imported target gRPC::grpc
add_library(gRPC::grpc STATIC IMPORTED)

set_target_properties(gRPC::grpc PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "gRPC::zlibstatic;gRPC::cares;gRPC::address_sorting;gRPC::re2;gRPC::upb;m;pthread;absl::flat_hash_map;absl::inlined_vector;absl::bind_front;absl::hash;absl::statusor;absl::variant;absl::utility;gRPC::gpr;OpenSSL::SSL;OpenSSL::Crypto;gRPC::address_sorting;-framework CoreFoundation"
)

# Create imported target gRPC::grpc_unsecure
add_library(gRPC::grpc_unsecure STATIC IMPORTED)

set_target_properties(gRPC::grpc_unsecure PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "gRPC::zlibstatic;gRPC::cares;gRPC::address_sorting;gRPC::re2;gRPC::upb;m;pthread;absl::flat_hash_map;absl::inlined_vector;absl::bind_front;absl::statusor;absl::variant;absl::utility;gRPC::gpr;gRPC::address_sorting;-framework CoreFoundation"
)

# Create imported target gRPC::grpc++
add_library(gRPC::grpc++ STATIC IMPORTED)

set_target_properties(gRPC::grpc++ PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libprotobuf;m;pthread;gRPC::grpc"
)

# Create imported target gRPC::grpc++_alts
add_library(gRPC::grpc++_alts STATIC IMPORTED)

set_target_properties(gRPC::grpc++_alts PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libprotobuf;m;pthread;gRPC::grpc++"
)

# Create imported target gRPC::grpc++_error_details
add_library(gRPC::grpc++_error_details STATIC IMPORTED)

set_target_properties(gRPC::grpc++_error_details PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libprotobuf;m;pthread;gRPC::grpc++"
)

# Create imported target gRPC::grpc++_reflection
add_library(gRPC::grpc++_reflection STATIC IMPORTED)

set_target_properties(gRPC::grpc++_reflection PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libprotobuf;m;pthread;gRPC::grpc++"
)

# Create imported target gRPC::grpc++_unsecure
add_library(gRPC::grpc++_unsecure STATIC IMPORTED)

set_target_properties(gRPC::grpc++_unsecure PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libprotobuf;m;pthread;gRPC::grpc_unsecure"
)

# Create imported target gRPC::grpc_plugin_support
add_library(gRPC::grpc_plugin_support STATIC IMPORTED)

set_target_properties(gRPC::grpc_plugin_support PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libprotoc;protobuf::libprotobuf;m;pthread"
)

# Create imported target gRPC::grpcpp_channelz
add_library(gRPC::grpcpp_channelz STATIC IMPORTED)

set_target_properties(gRPC::grpcpp_channelz PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "protobuf::libprotobuf;m;pthread;gRPC::grpc++"
)

# Create imported target gRPC::upb
add_library(gRPC::upb STATIC IMPORTED)

set_target_properties(gRPC::upb PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "m;pthread"
)

# Create imported target gRPC::grpc_cpp_plugin
add_executable(gRPC::grpc_cpp_plugin IMPORTED)

# Create imported target gRPC::grpc_csharp_plugin
add_executable(gRPC::grpc_csharp_plugin IMPORTED)

# Create imported target gRPC::grpc_node_plugin
add_executable(gRPC::grpc_node_plugin IMPORTED)

# Create imported target gRPC::grpc_objective_c_plugin
add_executable(gRPC::grpc_objective_c_plugin IMPORTED)

# Create imported target gRPC::grpc_php_plugin
add_executable(gRPC::grpc_php_plugin IMPORTED)

# Create imported target gRPC::grpc_python_plugin
add_executable(gRPC::grpc_python_plugin IMPORTED)

# Create imported target gRPC::grpc_ruby_plugin
add_executable(gRPC::grpc_ruby_plugin IMPORTED)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/gRPCTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "absl::base" "absl::core_headers" "absl::memory" "absl::status" "absl::cord" "absl::str_format" "absl::strings" "absl::synchronization" "absl::time" "absl::optional" "absl::flat_hash_map" "absl::inlined_vector" "absl::bind_front" "absl::hash" "absl::statusor" "absl::variant" "absl::utility" "protobuf::libprotobuf" "protobuf::libprotoc" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
